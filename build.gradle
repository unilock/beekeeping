plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
}

base {
    archivesName = project.archives_base_name
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

loom {
    mods {
        "beekeeping" {
            sourceSet("main")
        }
    }

	runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file('src/main/generated')}"
			vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
				'src/main/generated'
			]
		}
	}
}

repositories {
    maven { url = "https://maven.parchmentmc.org/" } // Parchment
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.blamejared.com/" } // JEI
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib
    maven { url = "https://jitpack.io/" } // JitPack
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_mappings}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${project.portinglib_version}")

	modApi("net.minecraftforge:forgeconfigapiport-fabric:${project.forgeconfigapiport_version}") {
		exclude group: 'net.fabricmc'
	}
	// Required by Forge Config API Port
	implementation "com.electronwill.night-config:core:${project.nightconfig_version}"
	implementation "com.electronwill.night-config:toml:${project.nightconfig_version}"

    // Compile against the JEI API but do not include it at runtime
    modCompileOnlyApi "mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}"
    modCompileOnlyApi "mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}"
    // At runtime, use the full JEI jar for Fabric
    modRuntimeOnly "mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

java {
	withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from('LICENSE') {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
